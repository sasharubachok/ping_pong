from pygame import  *

class GameSprite(sprite.Sprite):
    def __init__(self, player_image,
                player_x, player_y,
                size_x, size_y,
                player_speed):
        sprite.Sprite.__init__(self)
        self.image = transform.scale(
            image.load(player_image), (
                size_x, size_y
            ))
        self.speed = player_speed
        self.rect = self.image.get_rect()
        self.rect.x = player_x
        self.rect.y = player_y
 
    def reset(self):
        window.blit(self.image, (
            self.rect.x, self.rect.y
        ))
 
 
class Player(GameSprite):
    def update_I(self):
        keys = key.get_pressed()
        if keys[K_w] and self.rect.y > 5:
            self.rect.x -= self.speed
        if keys[K_s] and self.rect.y < win_height - 80:
            self.rect.x += self.speed
 

    def fire(self):
        bullet = Bullet(img_bullet, self.rect.centerx,
                        self.rect.top, 15, 20, -15)
        bullets.add(bullet) 

    def update_I(self):
        keys = key.get_pressed()
        if keys[K_UP] and self.rect.y > 5:
            self.rect.x -= self.speed
        if keys[K_DOWN] and self.rect.y < win_height - 80:
            self.rect.x += self.speed
 
    def fire(self): 
back = (15,,48 , 99) 
win_width = 600 
win_heigt = 500
window = display.set_mode(win_width, win_heigt) 
window.fill(back) 

game = True 
finish = false 
clock = time.Clock()
FPS = 60 

racket_1 = Player("racket.png" , 30 ,200 , 4 ,50, 150) 
racket_2 = Player("racket.png" , 30 ,200 , 4 ,50, 150) 
ball = GameSprite("") 

font.init() 
font = font.font("Montserrat", 35) 
lose1 = font.render("PLAYER LOSE", 1, (180, 0 , 0)) 
lose2 = font.render("PLAYER LOSE", 1, (180, 0 , 0)) 

speedx = 3
speedy = 3 
while game: 
      for e in event.get(): 
          if e.type == QUIT 
          game = =False 
   if finish is not True: 
       window.fill(back) 
       racket_1.update_I() 
       racket_2.update_r() 
       ball.rect.x += speedx
    ball.rect.y += speedy 
racket_1.reset() 
racket_2.reset() 
ball.reset()
display.update() 
clock.tick(FPS)